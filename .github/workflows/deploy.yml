name: Deploy to Server

on:
  push:
    branches:
      - master

jobs:
  check-connection:
    runs-on: ubuntu-latest
    steps:
      - name: Check SSH Key exists
        run: test -n "${{ secrets.SSH_PRIVATE_KEY }}" && echo "Key exists" || echo "Key is empty"

      - name: Test connection
        id: ssh_test
        uses: appleboy/ssh-action@master
        with:
          host: 193.239.161.50
          username: Administrator
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: echo Connection tested

      - name: Check connection result
        run: |
          echo "Test connection..."
          if [ "${{ steps.ssh_test.outcome }}" == "success" ]; then
            echo "Connection successful"
          else
            echo "Connection failed"
            exit 1
          fi

  checkout_repository:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

  deploy:
    needs: [ checkout_repository, check-connection ]
    runs-on: ubuntu-latest
    steps:
      - name: Set OS environment variable
        run: echo "OS=${{ secrets.OS }}" >> $GITHUB_ENV

      - name: Deploy to Windows Server
        if: env.OS == 'windows'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: >
            echo "Deploying on Windows..." ^
            && echo "Deleting old directory..." ^
            && rmdir /s /q C:\ASGBuilds\ICAO 2>nul ^
            && echo "Deleting success. Creating new directory..." ^
            && mkdir C:\ASGBuilds\ICAO ^
            && echo "Cloning repository into C:\ASGBuilds\ICAO"
            && git clone https://github.com/KeFFiA/ASG.git C:\ASGBuilds\ICAO ^
            && echo "Successfully cloned. Activating venv..." ^
            && python -m venv C:\ASGBuilds\ICAO\venv ^
            && call C:\ASGBuilds\ICAO\venv\Scripts\activate ^
            && echo "Venv successfully activated. Installing requirements..." ^
            && C:\ASGBuilds\ICAO\venv\Scripts\pip install -r C:\ASGBuilds\ICAO\requirements.txt ^
            && echo "Requirements successfully installed. Creating environment variables..." ^
            && setx DATABASE_URL "postgresql+asyncpg://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@${{ secrets.DB_HOST }}/${{ secrets.DATABASE }}" /M ^
            && setx DATABASE_URL_TEST "postgresql://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@${{ secrets.DB_HOST }}/${{ secrets.DATABASE }}" /M ^
            && echo "Enviroment variables created. Creating startup task..." ^
            && schtasks /create /tn "ASG Python Service" /tr "C:\ASGBuilds\ICAO\venv\Scripts\pythonw.exe C:\ASGBuilds\ICAO\main.py" /sc onstart /ru SYSTEM /f ^
            && echo "Startup task created." ^
            && echo "Deploy complete!"

      - name: Deploy to Linux Server (Install Docker if needed)
        if: env.OS == 'linux'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Checking if Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            fi
            echo "Deploying in Docker..."
            docker stop asg_container || true
            docker rm asg_container || true
            docker rmi asg_image || true
            docker build -t asg_image .
            docker run -d --name asg_container \
              -e DATABASE_URL="${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@${{ secrets.DB_HOST }}/${{ secrets.DATABASE }}" \
              -e DATABASE_URL_TEST="${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@${{ secrets.DB_HOST }}/${{ secrets.DATABASE }}" \
              asg_image
