name: Deploy to Windows Server

on:
  push:
    branches:
      - master

jobs:
  check-connection:
    runs-on: ubuntu-latest
    steps:
      - name: Check SSH Key exists
        run: test -n "${{ secrets.SSH_PRIVATE_KEY }}" && echo "Key exists" || echo "Key is empty"

      - name: Test connection
        id: ssh_test
        uses: appleboy/ssh-action@master
        with:
          host: 193.239.161.50
          username: Administrator
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: echo Test connection

      - name: Check connection result
        run: |
          echo "Test connection..."
          if [ "${{ steps.ssh_test.outcome }}" == "success" ]; then
            echo "Connection successful"
          else
            echo "Connection failed"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: check-connection
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: 193.239.161.50
          username: Administrator
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: >
            del C:\deploy.log 2>nul &&
            echo Stopping old service... >> C:\deploy.log &&
            sc stop ASGService || echo Service not found >> C:\deploy.log &&
            sc delete ASGService || echo Service not found >> C:\deploy.log &&

            echo Deploying new version... >> C:\deploy.log &&
            rmdir /s /q C:\ASGBuilds 2>nul &&
            mkdir C:\ASGBuilds &&

            git clone https://github.com/KeFFiA/ASG.git C:\ASGBuilds &&

            echo Setting up environment variables... >> C:\deploy.log &&
            setx DATABASE_URL "postgresql+asyncpg://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@localhost/${{ secrets.DATABASE }}" &&
            setx DATABASE_URL_TEST "postgresql://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@localhost/${{ secrets.DATABASE }}" &&

            echo Setting up Python environment... >> C:\deploy.log &&
            cd C:\ASGBuilds &&
            python -m ensurepip --default-pip &&
            python -m venv venv &&
            venv\Scripts\pip install --upgrade pip &&
            venv\Scripts\pip install -r requirements.txt &&

            echo Creating service... >> C:\deploy.log &&
            sc create ASGService binPath="\"C:\ASGBuilds\venv\Scripts\python.exe\" \"C:\ASGBuilds\main.py\"" start=auto &&

            echo Starting service... >> C:\deploy.log &&
            sc start ASGService
